<?xml version="1.0" encoding="utf-8"?>
<type name="Functions" fullname="Helpers.Skyrim.Functions" category="Helpers">
  <summary>
            Provides methods that can be used to create new <see cref="Fields.Skyrim.Condition" /> based on Papyrus functions. 
            <see cref="Fields.Skyrim.Condition">Conditions</see> created with these methods can be added to a <see cref="Fields.Skyrim.ConditionCollection" />.
            </summary>
  <method name="EPTemperingItemIsEnchanted" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> EPTemperingItemIsEnchanted()</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>EPTemperingItemIsEnchanted</b> Papyrus function.
            </summary>
  </method>
  <method name="GenericFunction" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GenericFunction(<c>int</c>)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on Papyrus function that has the specified number and no parameters. 
            </summary>
  </method>
  <method name="GenericFunction" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GenericFunction(<c>int</c>,<c>object</c>)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on Papyrus function that has the specified number and one parameter.
            </summary>
  </method>
  <method name="GenericFunction" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GenericFunction(<c>int</c>,<c>object</c>,<c>object</c>)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on Papyrus function that has the specified number and two parameters.
            </summary>
  </method>
  <method name="GetCurrentTime" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetCurrentTime()</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetCurrentTime</b> Papyrus function.
            </summary>
  </method>
  <method name="GetGlobalValue" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetGlobalValue(<see cref="Forms.Form" />)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetGlobalValue</b> Papyrus function.
            </summary>
  </method>
  <method name="GetInCurrentLoc" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetInCurrentLoc(<see cref="Forms.Form" />)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetInCurrentLoc</b> Papyrus function.
            </summary>
  </method>
  <method name="GetItemCount" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetItemCount(<see cref="Forms.Form" />)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetItemCount</b> Papyrus function.
            </summary>
  </method>
  <method name="GetQuestCompleted" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetQuestCompleted(<see cref="Forms.Form" />)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetQuestCompleted</b> Papyrus function.
            </summary>
  </method>
  <method name="GetStageDone" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetStageDone(<see cref="Forms.Form" />,<c>int</c>)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetStageDone</b> Papyrus function.
            </summary>
  </method>
  <method name="GetVMQuestVariable" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> GetVMQuestVariable(<see cref="Forms.Form" />,<c>string</c>)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>GetVMQuestVariable</b> Papyrus function.
            </summary>
  </method>
  <method name="HasKeyword" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> HasKeyword(<see cref="Forms.Form" />)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>HasKeyword</b> Papyrus function.
            </summary>
  </method>
  <method name="HasPerk" extension="false">
    <signature>
      <see cref="Fields.Skyrim.Condition" /> HasPerk(<see cref="Forms.Form" />)</signature>
    <summary>
            Creates a new <see cref="Fields.Skyrim.Condition" /> based on the <b>HasPerk</b> Papyrus function.
            </summary>
  </method>
  <remarks>
    <p>
            Methods <code>GenericFunction()</code> can be used to create a new condition based on basically any Papyrus function 
            when the proper function number and appropriate arguments are provided. 
            The engine knows what arguments every function requires and will issue a warning if an incorrect number or types of arguments is specified.
            </p>
    <p>
            Specific methods that create conditions based on commonly used functions have been added and eventually more functions will be added. 
            </p>
  </remarks>
</type>